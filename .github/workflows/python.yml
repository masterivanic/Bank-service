name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
env:
  POETRY_VERSION: '1.8.2'
  PYTHON_VERSION: '3.10'

jobs:
  setup-python:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - --version ${{ env.POETRY_VERSION }}
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.cache-key.outputs.key }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi

      - name: Upload venv artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-venv
          path: .venv/
          retention-days: 1

  python-tests:
    runs-on: ubuntu-latest
    needs: setup-python
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - --version ${{ env.POETRY_VERSION }}
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Download venv artifact
        uses: actions/download-artifact@v4
        with:
          name: python-venv
          path: .venv/

      - name: Install dependencies (if cache missed)
        run: poetry install --no-interaction --no-ansi

      - name: Create reports directory
        run: mkdir -p reports

      - name: Run tests with coverage
        run: |
          poetry run pytest --junitxml=reports/junit.xml --cov=./ --cov-report=xml:reports/coverage.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: reports/
          retention-days: 30

      - name: Upload JUnit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-results
          path: reports/junit.xml
          retention-days: 30

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Pytest Tests
          path: reports/junit.xml
          reporter: java-junit